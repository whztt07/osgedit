#include <reflection/reflectionregistry.h>
#include <osgSim/ImpostorSprite>
#include <stdexcept>

/**
 * Reflector of class osgSim::ImpostorSprite
 */
class RefosgSimImpostorSprite: public ClassReflection {
public:
	RefosgSimImpostorSprite();
	virtual osg::Object *getObject() { return _object.get(); }
	virtual void setObject(osg::Object *obj);
	virtual const std::string &getType() const { return _class_name; }
	virtual const std::string &getOSGVersion() const { return _osg_version; }
	virtual const std::string &getDescription() const { return _class_description; }
	virtual unsigned getNumProperties() const { return _names.size(); }
	virtual const PropertyNames &getPropertyNames() { return _names; }
	virtual void addChild(osg::Object *child);
	virtual void removeChild(osg::Object *child);
	virtual unsigned getNumChildren();
	virtual osg::Object *getChildObject(unsigned i);
	virtual PropertyReflection *getProperty(const std::string &name);
	virtual PropertyReflection *getTableProperty(const std::string &name, unsigned row, unsigned col);
	virtual unsigned getNumTablePropertyColumns(const std::string &name);
	virtual unsigned getNumTablePropertyRows(const std::string &name);
	virtual const PropertyNames &getTablePropertyNames() { return _table_names; }
	virtual const PropertyNames getTablePropertyColumnTitles(const std::string &name);
	virtual const PropertyNames getTablePropertyRowTitles(const std::string &name);
private:
	osg::ref_ptr<osgSim::ImpostorSprite> _object;
	static PropertyNames _names;
	static PropertyNames _table_names;
	static std::string _class_name;
	static std::string _class_description;
	static std::string _osg_version;
};

static std::string _propnames[] = {"_name","_supportsDisplayList","_useDisplayList","_initialBound","_userData","_cullCallback","_lastFrameUsed","_parent","_drawCallback","_updateCallback","_useVertexBufferObjects","_storedLocalEyePoint","_eventCallback","_dataVariance"};
ClassReflection::PropertyNames RefosgSimImpostorSprite::_names(_propnames, _propnames+14);

ClassReflection::PropertyNames RefosgSimImpostorSprite::_table_names;

std::string RefosgSimImpostorSprite::_class_name("osgSim::ImpostorSprite");

std::string RefosgSimImpostorSprite::_class_description(" An ImposterSprite is a textured quad which is rendered in place of 3D geometry. The ImposterSprite is generated by rendering the original 3D geometry to a texture as an image cache. The ImpostorSprite is automatically generated by the osgUtil::CullVisitor so it not necessary to deal with it directly.     ");

std::string RefosgSimImpostorSprite::_osg_version("1.2");


/**********************************************************/
RefosgSimImpostorSprite::RefosgSimImpostorSprite() {
}

/**********************************************************/
void RefosgSimImpostorSprite::setObject(osg::Object *obj) {
	_object = dynamic_cast<osgSim::ImpostorSprite*>(obj);
}
static class Enum_osg_object_datavariance: public Enum<osg::Object::DataVariance> {
public:
	Enum_osg_object_datavariance() {
		add("DYNAMIC", osg::Object::DYNAMIC);
		add("STATIC", osg::Object::STATIC);
		add("UNSPECIFIED", osg::Object::UNSPECIFIED);
	}
} osg_object_datavariance;

using namespace osgSim;
using namespace osg;

/**********************************************************/
void RefosgSimImpostorSprite::addChild(osg::Object *child) {
	{osg::Texture2D *cobj = dynamic_cast<osg::Texture2D *>(child);
	if (cobj != 0) {
		_object->setTexture(cobj,0,0);
		return;
	}}
	{StateSet *cobj = dynamic_cast<StateSet *>(child);
	if (cobj != 0) {
		_object->setStateSet(cobj);
		return;
	}}
	{Shape *cobj = dynamic_cast<Shape *>(child);
	if (cobj != 0) {
		_object->setShape(cobj);
		return;
	}}
	{osg::Camera *cobj = dynamic_cast<osg::Camera *>(child);
	if (cobj != 0) {
		_object->setCamera(cobj);
		return;
	}}
	throw InvalidTypeException();
}

/**********************************************************/
void RefosgSimImpostorSprite::removeChild(osg::Object *child) {
	{osg::Texture2D *cobj = dynamic_cast<osg::Texture2D *>(child);
	if (cobj != 0) {
		_object->setTexture(0,0,0);
		return;
	}}
	{StateSet *cobj = dynamic_cast<StateSet *>(child);
	if (cobj != 0) {
		_object->setStateSet(0);
		return;
	}}
	{Shape *cobj = dynamic_cast<Shape *>(child);
	if (cobj != 0) {
		_object->setShape(0);
		return;
	}}
	{osg::Camera *cobj = dynamic_cast<osg::Camera *>(child);
	if (cobj != 0) {
		_object->setCamera(0);
		return;
	}}
	throw InvalidTypeException();
}

/**********************************************************/
osg::Object *RefosgSimImpostorSprite::getChildObject(unsigned i) {
	if (i < 1) {
		return _object->getTexture();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getStateSet();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getShape();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getCamera();
	} else {
		i -= 1;
	}
	throw std::out_of_range("child");
}

/**********************************************************/
unsigned RefosgSimImpostorSprite::getNumChildren() {
	unsigned cnt = 0;
	cnt++;
	cnt++;
	cnt++;
	cnt++;
	return cnt;
}

/**********************************************************/
PropertyReflection* RefosgSimImpostorSprite::getProperty(const std::string &name) {
	if (name == "_supportsDisplayList") {
		return new GetterSetterProperty<bool, osg::Drawable>("_supportsDisplayList", _object.get(), &osgSim::ImpostorSprite::getSupportsDisplayList, &osgSim::ImpostorSprite::setSupportsDisplayList);
	}
	if (name == "_useDisplayList") {
		return new GetterSetterProperty<bool, osg::Drawable>("_useDisplayList", _object.get(), &osgSim::ImpostorSprite::getUseDisplayList, &osgSim::ImpostorSprite::setUseDisplayList);
	}
	if (name == "_initialBound") {
		return new GetterSetterProperty<BoundingBox, osg::Drawable>("_initialBound", _object.get(), &osgSim::ImpostorSprite::getInitialBound, &osgSim::ImpostorSprite::setInitialBound);
	}
	if (name == "_userData") {
		// Getter overloaded, must specify one type
		typedef Referenced * (osg::Object::*getUserDataFN)() ;
		return new GetterSetterProperty<Referenced*, osg::Object>("_userData", _object.get(), (getUserDataFN)&osgSim::ImpostorSprite::getUserData, &osgSim::ImpostorSprite::setUserData);
	}
	if (name == "_name") {
		// Getter overloaded, must specify one type
		typedef const std::string & (osg::Object::*getNameFN)() const;
		// Setter overloaded, must specify one type
		typedef void (osg::Object::*setNameFN)(const std::string &) ;
		return new GetterSetterProperty<std::string, osg::Object>("_name", _object.get(), (getNameFN)&osgSim::ImpostorSprite::getName, (setNameFN)&osgSim::ImpostorSprite::setName);
	}
	if (name == "_cullCallback") {
		// Getter overloaded, must specify one type
		typedef osg::Drawable::CullCallback * (osg::Drawable::*getCullCallbackFN)() ;
		return new GetterSetterProperty<osg::Drawable::CullCallback*, osg::Drawable>("_cullCallback", _object.get(), (getCullCallbackFN)&osgSim::ImpostorSprite::getCullCallback, &osgSim::ImpostorSprite::setCullCallback);
	}
	if (name == "_lastFrameUsed") {
		return new GetterSetterProperty<int, osgSim::ImpostorSprite>("_lastFrameUsed", _object.get(), &osgSim::ImpostorSprite::getLastFrameUsed, &osgSim::ImpostorSprite::setLastFrameUsed);
	}
	if (name == "_parent") {
		// Getter overloaded, must specify one type
		typedef Impostor * (osgSim::ImpostorSprite::*getParentFN)() ;
		// Setter overloaded, must specify one type
		typedef void (osgSim::ImpostorSprite::*setParentFN)(Impostor *) ;
		return new GetterSetterProperty<Impostor*, osgSim::ImpostorSprite>("_parent", _object.get(), (getParentFN)&osgSim::ImpostorSprite::getParent, (setParentFN)&osgSim::ImpostorSprite::setParent);
	}
	if (name == "_drawCallback") {
		// Getter overloaded, must specify one type
		typedef osg::Drawable::DrawCallback * (osg::Drawable::*getDrawCallbackFN)() ;
		return new GetterSetterProperty<osg::Drawable::DrawCallback*, osg::Drawable>("_drawCallback", _object.get(), (getDrawCallbackFN)&osgSim::ImpostorSprite::getDrawCallback, &osgSim::ImpostorSprite::setDrawCallback);
	}
	if (name == "_updateCallback") {
		// Getter overloaded, must specify one type
		typedef osg::Drawable::UpdateCallback * (osg::Drawable::*getUpdateCallbackFN)() ;
		return new GetterSetterProperty<osg::Drawable::UpdateCallback*, osg::Drawable>("_updateCallback", _object.get(), (getUpdateCallbackFN)&osgSim::ImpostorSprite::getUpdateCallback, &osgSim::ImpostorSprite::setUpdateCallback);
	}
	if (name == "_useVertexBufferObjects") {
		return new GetterSetterProperty<bool, osg::Drawable>("_useVertexBufferObjects", _object.get(), &osgSim::ImpostorSprite::getUseVertexBufferObjects, &osgSim::ImpostorSprite::setUseVertexBufferObjects);
	}
	if (name == "_storedLocalEyePoint") {
		return new GetterSetterProperty<osg::Vec3, osgSim::ImpostorSprite>("_storedLocalEyePoint", _object.get(), &osgSim::ImpostorSprite::getStoredLocalEyePoint, &osgSim::ImpostorSprite::setStoredLocalEyePoint);
	}
	if (name == "_dataVariance") {
		return new GetterSetterEnumProperty<osg::Object::DataVariance, osg::Object>("_dataVariance", _object.get(), &osgSim::ImpostorSprite::getDataVariance, &osgSim::ImpostorSprite::setDataVariance, osg_object_datavariance);
	}
	if (name == "_eventCallback") {
		// Getter overloaded, must specify one type
		typedef osg::Drawable::EventCallback * (osg::Drawable::*getEventCallbackFN)() ;
		return new GetterSetterProperty<osg::Drawable::EventCallback*, osg::Drawable>("_eventCallback", _object.get(), (getEventCallbackFN)&osgSim::ImpostorSprite::getEventCallback, &osgSim::ImpostorSprite::setEventCallback);
	}
	throw PropertyNotFoundException(name);
}
unsigned RefosgSimImpostorSprite::getNumTablePropertyColumns(const std::string &name) {
	throw PropertyNotFoundException(name);
}
unsigned RefosgSimImpostorSprite::getNumTablePropertyRows(const std::string &name) {
	throw PropertyNotFoundException(name);
}
PropertyReflection *RefosgSimImpostorSprite::getTableProperty(const std::string &name, unsigned row, unsigned col) {
	throw PropertyNotFoundException(name);
}
const ClassReflection::PropertyNames RefosgSimImpostorSprite::getTablePropertyColumnTitles(const std::string &name) {
	throw PropertyNotFoundException(name);
}
const ClassReflection::PropertyNames RefosgSimImpostorSprite::getTablePropertyRowTitles(const std::string &name) {
	PropertyNames titles;
	return titles;
}

/** REGISTERING **/
RegisterWrapperClass<osgSim::ImpostorSprite, RefosgSimImpostorSprite> _registerRefosgSimImpostorSprite;
