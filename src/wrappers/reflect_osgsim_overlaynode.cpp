#include <reflection/reflectionregistry.h>
#include <osgSim/OverlayNode>
#include <stdexcept>

/**
 * Reflector of class osgSim::OverlayNode
 */
class RefosgSimOverlayNode: public ClassReflection {
public:
	RefosgSimOverlayNode();
	virtual osg::Object *getObject() { return _object.get(); }
	virtual void setObject(osg::Object *obj);
	virtual const std::string &getType() const { return _class_name; }
	virtual const std::string &getOSGVersion() const { return _osg_version; }
	virtual const std::string &getDescription() const { return _class_description; }
	virtual unsigned getNumProperties() const { return _names.size(); }
	virtual const PropertyNames &getPropertyNames() { return _names; }
	virtual void addChild(osg::Object *child);
	virtual void removeChild(osg::Object *child);
	virtual unsigned getNumChildren();
	virtual osg::Object *getChildObject(unsigned i);
	virtual PropertyReflection *getProperty(const std::string &name);
	virtual PropertyReflection *getTableProperty(const std::string &name, unsigned row, unsigned col);
	virtual unsigned getNumTablePropertyColumns(const std::string &name);
	virtual unsigned getNumTablePropertyRows(const std::string &name);
	virtual const PropertyNames &getTablePropertyNames() { return _table_names; }
	virtual const PropertyNames getTablePropertyColumnTitles(const std::string &name);
	virtual const PropertyNames getTablePropertyRowTitles(const std::string &name);
private:
	osg::ref_ptr<osgSim::OverlayNode> _object;
	static PropertyNames _names;
	static PropertyNames _table_names;
	static std::string _class_name;
	static std::string _class_description;
	static std::string _osg_version;
};

static std::string _propnames[] = {"_name","_overlayTechnique","_continuousUpdate","_initialBound","_userData","_texEnvMode","_nodeMask","_overlayClearColor","_cullingActive","_overlayBaseHeight","_descriptions","_dataVariance"};
ClassReflection::PropertyNames RefosgSimOverlayNode::_names(_propnames, _propnames+12);

ClassReflection::PropertyNames RefosgSimOverlayNode::_table_names;

std::string RefosgSimOverlayNode::_class_name("osgSim::OverlayNode");

std::string RefosgSimOverlayNode::_class_description(" OverlayNode is for creating texture overlays on scenes, with the overlay texture being generated by pre rendering an Overlay Subgraph to a texture, then projecting this resulting texture on the scene.     ");

std::string RefosgSimOverlayNode::_osg_version("1.2");


/**********************************************************/
RefosgSimOverlayNode::RefosgSimOverlayNode() {
}

/**********************************************************/
void RefosgSimOverlayNode::setObject(osg::Object *obj) {
	_object = dynamic_cast<osgSim::OverlayNode*>(obj);
}
static class Enum_osg_object_datavariance: public Enum<osg::Object::DataVariance> {
public:
	Enum_osg_object_datavariance() {
		add("DYNAMIC", osg::Object::DYNAMIC);
		add("STATIC", osg::Object::STATIC);
		add("UNSPECIFIED", osg::Object::UNSPECIFIED);
	}
} osg_object_datavariance;
static class Enum_osgsim_overlaynode_overlaytechnique: public Enum<osgSim::OverlayNode::OverlayTechnique> {
public:
	Enum_osgsim_overlaynode_overlaytechnique() {
		add("OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY", osgSim::OverlayNode::OBJECT_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY);
		add("VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY", osgSim::OverlayNode::VIEW_DEPENDENT_WITH_ORTHOGRAPHIC_OVERLAY);
		add("VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY", osgSim::OverlayNode::VIEW_DEPENDENT_WITH_PERSPECTIVE_OVERLAY);
	}
} osgsim_overlaynode_overlaytechnique;
static class Enum_glenum_texEnvMode: public Enum<GLenum> {
public:
	Enum_glenum_texEnvMode() {
	}
} glenum_texEnvMode;

using namespace osgSim;
using namespace osg;

/**********************************************************/
void RefosgSimOverlayNode::addChild(osg::Object *child) {
	{Node *cobj = dynamic_cast<Node *>(child);
	if (cobj != 0) {
		_object->addChild(cobj);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setUpdateCallback(cobj);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setCullCallback(cobj);
		return;
	}}
	{osg::StateSet *cobj = dynamic_cast<osg::StateSet *>(child);
	if (cobj != 0) {
		_object->setStateSet(cobj);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setEventCallback(cobj);
		return;
	}}
	{osg::Node *cobj = dynamic_cast<osg::Node *>(child);
	if (cobj != 0) {
		_object->setOverlaySubgraph(cobj);
		return;
	}}
	throw InvalidTypeException();
}

/**********************************************************/
void RefosgSimOverlayNode::removeChild(osg::Object *child) {
	{Node *cobj = dynamic_cast<Node *>(child);
	if (cobj != 0) {
		_object->removeChild(cobj);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setUpdateCallback(0);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setCullCallback(0);
		return;
	}}
	{osg::StateSet *cobj = dynamic_cast<osg::StateSet *>(child);
	if (cobj != 0) {
		_object->setStateSet(0);
		return;
	}}
	{NodeCallback *cobj = dynamic_cast<NodeCallback *>(child);
	if (cobj != 0) {
		_object->setEventCallback(0);
		return;
	}}
	{osg::Node *cobj = dynamic_cast<osg::Node *>(child);
	if (cobj != 0) {
		_object->setOverlaySubgraph(0);
		return;
	}}
	throw InvalidTypeException();
}

/**********************************************************/
osg::Object *RefosgSimOverlayNode::getChildObject(unsigned i) {
	if (i < _object->getNumChildren()) {
		return _object->getChild(i);
	} else {
		i -= _object->getNumChildren();
	}
	if (i < 1) {
		return _object->getUpdateCallback();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getCullCallback();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getStateSet();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getEventCallback();
	} else {
		i -= 1;
	}
	if (i < 1) {
		return _object->getOverlaySubgraph();
	} else {
		i -= 1;
	}
	throw std::out_of_range("child");
}

/**********************************************************/
unsigned RefosgSimOverlayNode::getNumChildren() {
	unsigned cnt = 0;
	cnt+= _object->getNumChildren();
	cnt++;
	cnt++;
	cnt++;
	cnt++;
	cnt++;
	return cnt;
}

/**********************************************************/
PropertyReflection* RefosgSimOverlayNode::getProperty(const std::string &name) {
	if (name == "_overlayTechnique") {
		return new GetterSetterEnumProperty<osgSim::OverlayNode::OverlayTechnique, osgSim::OverlayNode>("_overlayTechnique", _object.get(), &osgSim::OverlayNode::getOverlayTechnique, &osgSim::OverlayNode::setOverlayTechnique, osgsim_overlaynode_overlaytechnique);
	}
	if (name == "_continuousUpdate") {
		return new GetterSetterProperty<bool, osgSim::OverlayNode>("_continuousUpdate", _object.get(), &osgSim::OverlayNode::getContinuousUpdate, &osgSim::OverlayNode::setContinuousUpdate);
	}
	if (name == "_initialBound") {
		return new GetterSetterProperty<BoundingSphere, osg::Node>("_initialBound", _object.get(), &osgSim::OverlayNode::getInitialBound, &osgSim::OverlayNode::setInitialBound);
	}
	if (name == "_userData") {
		// Getter overloaded, must specify one type
		typedef Referenced * (osg::Object::*getUserDataFN)() ;
		return new GetterSetterProperty<Referenced*, osg::Object>("_userData", _object.get(), (getUserDataFN)&osgSim::OverlayNode::getUserData, &osgSim::OverlayNode::setUserData);
	}
	if (name == "_texEnvMode") {
		return new GetterSetterEnumProperty<GLenum, osgSim::OverlayNode>("_texEnvMode", _object.get(), &osgSim::OverlayNode::getTexEnvMode, &osgSim::OverlayNode::setTexEnvMode, glenum_texEnvMode);
	}
	if (name == "_nodeMask") {
		return new GetterSetterProperty<osg::Node::NodeMask, osg::Node>("_nodeMask", _object.get(), &osgSim::OverlayNode::getNodeMask, &osgSim::OverlayNode::setNodeMask);
	}
	if (name == "_overlayClearColor") {
		return new GetterSetterProperty<osg::Vec4, osgSim::OverlayNode>("_overlayClearColor", _object.get(), &osgSim::OverlayNode::getOverlayClearColor, &osgSim::OverlayNode::setOverlayClearColor);
	}
	if (name == "_name") {
		// Getter overloaded, must specify one type
		typedef const std::string & (osg::Object::*getNameFN)() const;
		// Setter overloaded, must specify one type
		typedef void (osg::Object::*setNameFN)(const std::string &) ;
		return new GetterSetterProperty<std::string, osg::Object>("_name", _object.get(), (getNameFN)&osgSim::OverlayNode::getName, (setNameFN)&osgSim::OverlayNode::setName);
	}
	if (name == "_cullingActive") {
		return new GetterSetterProperty<bool, osg::Node>("_cullingActive", _object.get(), &osgSim::OverlayNode::getCullingActive, &osgSim::OverlayNode::setCullingActive);
	}
	if (name == "_dataVariance") {
		return new GetterSetterEnumProperty<osg::Object::DataVariance, osg::Object>("_dataVariance", _object.get(), &osgSim::OverlayNode::getDataVariance, &osgSim::OverlayNode::setDataVariance, osg_object_datavariance);
	}
	if (name == "_overlayBaseHeight") {
		return new GetterSetterProperty<double, osgSim::OverlayNode>("_overlayBaseHeight", _object.get(), &osgSim::OverlayNode::getOverlayBaseHeight, &osgSim::OverlayNode::setOverlayBaseHeight);
	}
	if (name == "_descriptions") {
		// Getter overloaded, must specify one type
		typedef osg::Node::DescriptionList & (osg::Node::*getDescriptionsFN)() ;
		// Setter overloaded, must specify one type
		typedef void (osg::Node::*setDescriptionsFN)(const osg::Node::DescriptionList &) ;
		return new GetterSetterProperty<osg::Node::DescriptionList, osg::Node>("_descriptions", _object.get(), (getDescriptionsFN)&osgSim::OverlayNode::getDescriptions, (setDescriptionsFN)&osgSim::OverlayNode::setDescriptions);
	}
	throw PropertyNotFoundException(name);
}
unsigned RefosgSimOverlayNode::getNumTablePropertyColumns(const std::string &name) {
	throw PropertyNotFoundException(name);
}
unsigned RefosgSimOverlayNode::getNumTablePropertyRows(const std::string &name) {
	throw PropertyNotFoundException(name);
}
PropertyReflection *RefosgSimOverlayNode::getTableProperty(const std::string &name, unsigned row, unsigned col) {
	throw PropertyNotFoundException(name);
}
const ClassReflection::PropertyNames RefosgSimOverlayNode::getTablePropertyColumnTitles(const std::string &name) {
	throw PropertyNotFoundException(name);
}
const ClassReflection::PropertyNames RefosgSimOverlayNode::getTablePropertyRowTitles(const std::string &name) {
	PropertyNames titles;
	return titles;
}

/** REGISTERING **/
RegisterWrapperClass<osgSim::OverlayNode, RefosgSimOverlayNode> _registerRefosgSimOverlayNode;
